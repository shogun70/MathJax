/*************************************************************
 *  Copyright (c) 2010-2011 Design Science, Inc.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* 
This javascript snippet facilitates converting a HTML page to JS which is 
required for cross-domain download.  After stringifying the HTML and prefixing 
with this snippet the resulting script can be imported into an iframe, 
probably with:
	var doc = iframe.contentDocument;
	doc.open();
	doc.write('<script src="' + scriptURL + '"></script>');
	doc.close();

WARN it is assumed that all src href's (for script or img) are relative to the 
scriptURL, and that all inline scripts have no attributes and are of the form:
	<script>...</script>

NOTE we have to jump through hoops for IE because it doesn't execute sourced 
scripts in order when the page is created with document.write(),
This involves disabling inline scripts until well after window.onload,
when they are dynamically inserted.
 */
(function() {
	var scripts = document.getElementsByTagName("script"),
	    script = scripts[scripts.length-1],
	    base = script.src.replace(/[^/]*$/, "");
	var input = (arguments.length > 1) ?
		[].join.call(arguments, "") :
		arguments[0];
	var output = input.replace(/src="/gi, 'src="' + base); 
	if ("onpropertychange" in script) {
		// don't execute inline scripts (until later)
		output = [
			output.replace(/\<script\>/gi, '<script type="text/plain">'),
			'<script>window.onload = ', runner.toString(), '</script>'
		].join("");
	}
	
	window.onload = function() {
		document.open();
		document.write(output);
		document.close();
	}
	function runner() { window.setTimeout(function() {
		var head = document.getElementsByTagName("head")[0];
		var scripts = document.getElementsByTagName("script");
		for (var n=scripts.length, i=0; i<n; i++) {
			var oldscript = scripts[i];
			if (oldscript.type != "text/plain") continue;
			var newscript = document.createElement("script");
			if (oldscript.text) newscript.text = oldscript.text;
			else newscript.appendChild(document.createTextNode(oldscript.innerHTML));
			oldscript.parentNode.removeChild(oldscript);
			head.appendChild(newscript);
		}
	}, 100); }
})

("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n<html>\n<head>\n<title>MathJax Diagnostics</title>\n<!-- Copyright (c) 2010-2011 Design Science, Inc. -->\n<!-- \nThis page will be in an iframe.\nInit(context) is called to set the target window (which is presumeably a\nMathJax enabled page). \n-->\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<style>\nhtml {\n\twidth: 100%;\n\toverflow: hidden;\n\tbackground-color: #fff;\n}\nhtml, body {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: none;\n}\nh2 {\n\twidth: 100%;\n\ttext-align: center;\n\tbackground-color: #eee;\n\tborder: 2px solid #aaa;\n\tmargin: 0.1em 0;\n}\nlegend { font-weight: bold; }\ndl { \n\tmargin: 0; \n\twidth: 80ex;\n}\nlabel {\n\tbackground-color: #eee;\n\tborder: 1px solid #aaa;\n\tdisplay: inline-block;\n\tmargin: 0.2em; margin-left: 0;\n\tpadding: 0.2em;\n\tborder-radius: 4px;\n\t-moz-border-radius: 4px;\n\t-webkit-border-radius: 4px;\n}\n#tabs {\n\twidth: 100%;\n\tbackground-color: #eee;\n\theight: 1.6em;\n}\nul.tabs {\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tpadding-left: 0px;\n\tmargin: 0px;\n\tborder: 1px solid #aaa;\n\tline-height: 1.5em;\n}\nul.tabs li {\n\tdisplay: inline;\n\tbackground-color: #eee;\n\tpadding: 0.2em 0.5em;\n\tline-height: inherit;\n\tvertical-align: bottom;\n}\nul.tabs li.selected {\n\tbackground-color: #fafafa;\n\tborder-left: 1px solid #aaa;\n\tborder-right: 1px solid #aaa;\n}\nul.tabs li.disabled {\n\tdisplay: none;\n}\ntable {\n\ttable-layout: fixed;\n\tborder-collapse: collapse;\n\twidth: 100%;\n\tborder: 1px solid #aaa;\n\tmargin: 0.2em; margin-left: 0;\n}\ncaption {\n\twidth: auto;\n\tbackground-color: #eee;\n\tborder: 1px solid #aaa;\n\tpadding: 0.2em;\n\t-moz-border-radius: 0 4px 0 0;\n\t-webkit-border-radius: 0 4px 0 0;\n\tborder-radius: 0 4px 0 0;\n}\nth, td {\n\tborder: 1px solid #aaa;\n\tpadding: 0.2em;\n}\ntr { border: 1px solid #aaa; }\nth { text-align: left; }\nth, td { padding-left: 1em; padding-right: 1em; }\ninput[type=text] { width: 20em; }\n\n#panels {\n\toverflow: auto;\n}\n.hidden {\n\theight: 0px;\n\twidth: 100%;\n\toverflow: hidden;\n}\n</style>\n<script src=\"jquery.js\"></script>\n<script src=\"ui.js\"></script>\n<script>\nvar mui = MathJaxUI, \n\textend = Object.extend, each = Object.each, forEach = Array.forEach, eachWord = String.eachWord;\n\nvar MathJaxDx = {}; // namespace for diag utils\n\n$(document).delegate(\"input\", \"click\", function(event) { if (this.readOnly) event.preventDefault(); });\n</script>\n</head>\n<body>\n\n<div id=\"start\">\n\n</div>\n\n<script>\nMathJaxDx.Start = (function() {\n\nreturn {\n\nonPageStart: function(context, MathJax) {\n\t$(\"#main\").addClass(\"hidden\");\n\t$(\"#start\").append(\"<h2>Waiting for MathJax</h2>\");\n},\nonPageReady: function(context, MathJax) {\n\tvar mjScript;\n\tArray.some(context.document.getElementsByTagName(\"script\"), function(script) {\n\t\tvar success = script.src.match(\"MathJax.js\");\n\t\tif (success) mjScript = script;\n\t\treturn success;\n\t});\n\tvar scriptLink = mjScript ?\n\t\t'<a href=\"' + mjScript.src + '\">' + mjScript.src + '</a>'\n\t\t: \"NOT PRESENT\";\n\t$(\"#start\").append('<div style=\"width: 80ex; padding: 0 0.5em; background-color: yellow; border: 1px solid #aaa; margin: auto; \"><p>Although the page has loaded, MathJax has not started. This may be because the MathJax script is in an unexpected location or corrupted. </p><p>The MathJax script for this page is ' + scriptLink + '.</p></div>');\n\n},\nonMathJaxReady: function(context, MathJax) {\n\t$(\"#start\").html(\"<h2>MathJax has started</h2>\");\n\t$(\"#start\").addClass(\"hidden\");\n\t$(\"#main\").removeClass(\"hidden\");\n}\n\n}\n\n})();\n\n</script>\n<div id=\"main\">\n\n<ul id=\"tabs\" class=\"tabs\">\n\t<li><a href=\"#basicPanel\" title=\"Basic troubleshooting checks\">Basic</a></li>\n\t<li><a href=\"#messagesPanel\" title=\"Message log\">Messages</a></li>\n\t<li><a href=\"#propertiesPanel\" title=\"Complete view of document and MathJax properties\">Properties</a></li>\n\t<li><a href=\"#timelinesPanel\" title=\"Timelines for MathJax tasks\">Timelines</a></li>\n\t<li><a href=\"#mathPanel\" title=\"Timings for math processing\">Math</a></li>\n</ul>\n\t\n<div id=\"panels\">\n\n<!-- Basic Panel -->\n<style type=\"text/css\">\n#basicPanel li { \n\tpadding: 0.3em;\n\tmargin-bottom: -1px;\n\tpadding-left: 0;\n\tmargin-left: 0;\n\tlist-style-type: none;\n\tlist-style-postion: inside;\n}\n#basicPanel li.ok { border: 1px solid; border-left: 6px solid green; }\n#basicPanel li.warn { border: 1px solid; border-left: 6px solid orange; }\n#basicPanel li.error { border: 1px solid; border-left: 6px solid red; }\n\n#basicPanel .group dl li { list-style-type: none; }\n#basicPanel .group dl dt { font-weight: bold }\n#basicPanel .group dl dt, #basicPanel .group dl dd { display: inline; }\n#basicPanel .group code { background-color: #ccc; }\n</style>\n\n<div id=\"basicPanel\">\n<h2>Basic troubleshooting checks</h2>\n</div>\n\n<script src=\"page-basic.js\">/* MathJaxBasicChecks = [] */</script>\n<script>\nMathJaxDx.Basic = (function() {\t\n\nvar runChecks = function(context, MathJax) {\n\tArray.forEach(Basic.checks, function(checkGroup) {\n\t\tvar $group = $('<fieldset><legend>' + checkGroup.title + '</legend></fieldset');\n\t\tvar $list = $('<dl class=\"group\"></dl>');\n\n\t\tArray.some(checkGroup.checks, function(check) {\n\t\t\tvar fields, result, stop;\n\t\t\tif (check.getAll) {\n\t\t\t\tfields = check.getAll(context, MathJax);\n\t\t\t\tresult = fields.result;\n\t\t\t\tstop = fields.stop;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfields = check;\n\t\t\t\tresult = check.test(context, MathJax);\n\t\t\t\tstop = false;\n\t\t\t}\n\t\t\tvar $item = $('<li name=\"' + fields.name + '\">' +\n\t\t\t'<dt><input type=\"checkbox\" readonly /><a href=\"#\">' + fields.title + '</a></dt>' + \n\t\t\t'<dd><small>' + fields.description + '</small></dd>' + \n\t\t\t'</li>');\n\t\t\tif (result) {\n\t\t\t\t$item.addClass(\"ok\");\n\t\t\t\t$item.find(\"dt input\").attr(\"checked\", true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$item.addClass(fields.type == \"warn\" ? \"warn\" : \"error\");\n\t\t\t}\n\t\t\t$item.appendTo($list);\n\t\t\treturn stop;\n\t\t});\n\t\t$list.appendTo($group);\n\t\t$group.appendTo(\"#basicPanel\");\n\t});\n\t$(\"#basicPanel\").delegate(\"dt a\", \"click\", function(e) { \n\t\t$(this).parent().next().toggleClass(\"hidden\"); return false; \n\t}).find(\"dt a\").click();\n}\n\nvar Basic = {\n\t\nchecks: MathJaxBasicChecks,\nonMathJaxReady: function(context, MathJax) {\n\tMathJax.Hub.Register.StartupHook(\"End\", function() {\t\n\t\trunChecks(context, MathJax);\n\t});\t\n}\n\n}\n\nreturn Basic;\n})();\n\n</script>\n\n<!-- Messages Panel -->\n\n<div id=\"messagesPanel\">\n<h2>MathJax Messages</h2>\n<table id=\"messages\">\n\t<tbody>\n\t\t<tr class=\"template\"><td></td></tr>\n\t</tbody>\n</table>\n</div>\n\n<script>\n\nMathJaxDx.Messages = (function() {\t\n\nvar $display = $(\"#messagesPanel\"),\n\t$tBody = $display.find(\"tbody\"),\n\t$template = $tBody.find(\"tr.template\");\n$template.remove().removeClass(\"template\");\n\nvar addRow = function(text) {\n\tvar $row = $template.clone(true);\n\t$row.find(\"td\").text(text);\n\t$tBody.append($row);\n}\n\nvar Messages = {\n\t\nonMathJaxReady: function(context, MathJax) {\n\tArray.forEach(MathJax.Message.log, function(message, i) { \n\t\tif (i <= 0) return;\n\t\taddRow(message.text); \n\t});\n\tMathJax.Message._Set = MathJax.Message.Set;\n\tMathJax.Message.Set = function(text, n, clearDelay) {\n\t\taddRow(text);\n\t\treturn this._Set(text, n, clearDelay);\n\t}\n}\n\n}\n\nreturn Messages;\n})();\n</script>\n\n<!-- Properties Panel -->\n\n<div id=\"propertiesPanel\">\n<form action=\"mailto:\" method=\"post\" enctype=\"text/plain\">\n<h2>Document and MathJax properties <button type=\"submit\" title=\"Construct an email including these properties as content\">Send email</button></h2>\n<table id=\"properties\">\n\t<col />\n\t<col width=\"10%\" />\n\t<col width=\"20%\" />\n\t<thead>\n\t\t<tr><th>Property Name</th><th>Type</th><th>Value</th></tr>\n\t</thead>\n\t<tbody>\n\t\t<tr class=\"template\"><td></td><td></td><td></td></tr>\n\t</tbody>\n</table>\n</form>\n</div>\n\n<script src=\"page-properties.js\">/* MathJaxPropertiesSettings = {} */</script>\n<script>\nMathJaxDx.Properties = (function() {\n\nvar context;\n\nvar $display = $(\"#propertiesPanel\"),\n\t$tBody = $display.find(\"tbody\"),\n\t$template = $tBody.find(\".template\");\n$template.remove().removeClass(\"template\");\n\nvar createPropertyDisplay = function(name, sample) {\n\tvar type, inp = \"\";\n\tswitch (typeof sample) {\n\t\tcase \"object\":\n\t\t\tif (sample.length != null) {\n\t\t\t\ttype = \"list\";\n\t\t\t\tinp = '<input type=\"text\" readonly />';\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttype = \"object\";\n\t\t\t\tinp = '<input type=\"radio\" readonly />';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"boolean\":\n\t\t\ttype = \"boolean\";\n\t\t\tinp = '<input type=\"checkbox\" value=\"true\" readonly /><input type=\"checkbox\" value=\"false\" readonly checked style=\"display: none;\" />';\n\t\t\tbreak;\n\t\tcase \"number\":\n\t\t\ttype = \"number\";\n\t\t\tinp = '<input type=\"text\" readonly />';\n\t\t\tbreak;\n\t\tcase \"string\":\n\t\t\ttype = \"string\";\n\t\t\tinp = '<input type=\"text\" readonly />';\n\t\t\tbreak;\n\t}\n\tvar $row = $template.clone(true);\n\t$tBody.append($row);\n\tvar $cells = $row.find(\"td\");\n\tvar $nameCell = $cells.eq(0);\n\tvar $typeCell = $cells.eq(1);\n\tvar $valCell = $cells.eq(2);\n\t$nameCell.html(name);\n\t$typeCell.html(type);\n\t$valCell.html(inp);\n\t$valCell.find(\"input\").attr(\"name\", name);\n\treturn $valCell.find(\"input\")[0];\n}\n\nvar showObject = function(object, path) {\n\tObject.each(object, function(name, val) {\n\t\tif (!object.hasOwnProperty(name)) return;\n\t\tvar fullName = (path) ? path + \".\" + name : name;\n\t\tvar prop = context;\n\t\tArray.forEach (fullName.split(\".\"), function(field) {\n\t\t\tif (prop) prop = prop[field];\n\t\t});\n\t\t\n\t\tvar inpEl = createPropertyDisplay(fullName, val);\n\t\tif (prop == null) {\n\t\t\tinpEl.disabled = true;\n\t\t\tinpEl.title = \"NOT PRESENT\";\n\t\t}\n\t\tswitch (typeof val) {\n\t\t\tcase \"object\":\n\t\t\t\tif (val.length != null && prop) inpEl.value = prop.join(\",\");\n\t\t\t\telse {\n\t\t\t\t\tinpEl.disabled = true;\n\t\t\t\t\tif (prop) inpEl.checked = true;\n\t\t\t\t\tshowObject(val, fullName);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"boolean\":\n\t\t\t\tif (prop) {\n\t\t\t\t\tinpEl.checked = true;\n\t\t\t\t\tinpEl.nextSibling.checked = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"number\":\n\t\t\t\tif (prop) inpEl.value = prop;\n\t\t\t\tbreak;\n\t\t\tcase \"string\":\n\t\t\t\tif (prop) inpEl.value = prop;\n\t\t\t\tbreak;\n\t\t}\n\t});\n}\n\nvar Properties = {\n\nsettings: MathJaxPropertiesSettings,\nonMathJaxReady: function(_window, MathJax) {\n\tcontext = _window;\n\tvar _this = this;\n\tMathJax.Hub.Register.StartupHook(\"End\", function() {\t\n\t\tshowObject(Properties.settings);\n\t});\t\n}\n\n}\n\nreturn Properties;\n})();\n</script>\n\n<!-- Styles for timeline based panels: timelines, math -->\n<style>\ntable.timeline {\n\ttable-layout: auto;\n\twidth: 100%;\n\tborder-collapse: collapse;\n\tborder: 1px solid #aaa;\n\tmargin: 0.2em; margin-left: 0;\n}\ntable.timeline caption {\n\twidth: auto;\n\tbackground-color: #ccc;\n\tborder: 2px solid #aaa;\n\tpadding: 0.2em;\n\tborder-radius: 4px 4px 0 0;\n\t-moz-border-radius: 4px 4px 0 0;\n\t-webkit-border-radius: 4px 4px 0 0;\n}\ntable.timeline thead th {\n\tpadding: 0;\n\twidth: auto;\n}\ntable.timeline thead th button {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 100%;\n\tmargin: 0;\n\tborder-width: 1px;\n\tbackground-color: #eee;\n}\ntable.timeline tr {\n\tborder-top: 1px solid #eee;\n\twhite-space: nowrap;\n\toverflow: visible;\n}\ntable.timeline td {\n\toverflow: hidden;\n\twhite-space: nowrap;\n}\n\n.template {\n\tdisplay: none;\n}\ntable.timeline input {\n\tborder: none;\n\tbackground-color: transparent;\n}\ntable.timeline td.label input.type {\n\ttext-align: center;\n\twidth: 1em;\n\theight: 1em;\n\tfont-weight: bold;\n}\ntable.timeline input.start {\n\ttext-align: right;\n}\ntable.timeline input.stop {\n\ttext-align: left;\n\twidth: 9%;\n}\ntable.timeline input.duration {\n\ttext-align: center;\n}\ntable.timeline input.Action { background-color: green; color: white; }\ntable.timeline input.Script { background-color: blue; color: white; }\ntable.timeline input.Font { background-color: orange; color: white; }\ntable.timeline input.Process { background-color: blue; color: white; }\ntable.timeline input.Reprocess { background-color: orange; color: white; }\ntd.small { margin: 0; padding: 2px; line-height: 0.5em; }\ntd.small input { font-size: 0.5em; margin: 0; }\n</style>\n\n<!-- Timelines Panel -->\n\n<div id=\"timelinesPanel\">\n<table id=\"tasks\" class=\"timeline\">\n\t<col class=\"label\" />\n\t<col class=\"data\" style=\"width: 100%;\" />\n\t<thead>\n\t\t<tr>\n\t\t\t<th><button type=\"button\">Task</button></th>\n\t\t\t<th><button type=\"button\">Timeline (ms)</button></th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr class=\"template\">\n\t\t\t<td class=\"label\">\n\t\t\t\t<input readonly class=\"type\" name=\"type\" />\n\t\t\t\t<input readonly class=\"task\" name=\"name\" />\n\t\t\t</td>\n\t\t\t<td class=\"data\">\n\t\t\t\t<input readonly class=\"start interval\" name=\"start\" />\n\t\t\t\t<input readonly class=\"duration interval\" name=\"duration\" />\n\t\t\t\t<input readonly class=\"stop number\" name=\"stop\" />\n\t\t\t</td>\n\t\t</tr>\n\t</tbody> \n</table>\n</div>\n\n<script>\nMathJaxDx.Timelines = (function() {\n\nvar $table = $(\"#timelinesPanel\").find(\"table\"),\n\ttaskUI = new mui.DataTable($table[0]);\t\n\nvar beginTime, endTime, performance = {};\t\nvar actionNames = \"Config Cookie Styles Jax Extensions PreProcess Process\".split(/\\s+/);\nvar root, script = \"MathJax.js\";\n\nvar signalHandler = function(message) {\n\tvar now = endTime = Date.now();\n\tvar m = message.toString().split(/\\s+|\\s*,\\s*/);\n\tvar task = m[1], ph = m[0];\n\tif (actionNames.indexOf(task) >= 0) {\n\t\tif (ph == \"Begin\") performance[task] = { type: \"Action\", name: task, begin: now }\n\t\tif (ph == \"End\") performance[task].end = now;\n\t}\n\tif (task == \"Load\") {\n\t\tvar url = message.url;\n\t\tvar name = url.replace(root + \"/\", \"\");\n\t\tif (ph == \"Begin\") performance[name] = { type: \"Script\", name: name, url: url, begin: now };\n\t\tif (ph == \"End\") performance[name].end = now;\n\t}\n\tif (task == \"Font\") {\n\t\tvar name = message.fontName;\n\t\tif (ph == \"Begin\") performance[name] = { type: \"Font\", name: name, url: url, begin: now };\n\t\tif (ph == \"End\") performance[name].end = now;\t\t\t\n\t}\n}\n\n\n\nvar onPageStart = function(context) {\n\tbeginTime = endTime = Date.now();\n}\n\nvar onMathJaxReady = function(context, MathJax) {\n\nroot = MathJax.Hub.config.root;\nperformance[script] = {\n\ttype: \"Script\",\n\tname: script,\n\turl: root + \"/\" + script,\n\tbegin: beginTime,\n\tend: Date.now()\n};\n\n// intercept Font loading\nMathJax.Hub.Register.StartupHook(\"HTML-CSS Jax Ready\", function() {\n\tvar FONT = MathJax.OutputJax[\"HTML-CSS\"].Font;\n\tFONT._loadComplete = FONT.loadComplete;\n\tFONT.loadComplete = function(font, n, done, status) {\n\t\tMathJax.Hub.Startup.signal.Post({ name: \"End Font\", fontName: font.directory, toString: function() { return this.name; } });\n\t\treturn this._loadComplete(font, n, done, status);\n\t}\n\tFONT._loadWebFont = FONT.loadWebFont;\n\tFONT.loadWebFont = function(font) {\n\t\tMathJax.Hub.Startup.signal.Post({ name: \"Begin Font\", fontName: font.directory, toString: function() { return this.name; } });\n\t\treturn this._loadWebFont(font);\n\t}\n});\n\n// intercept Ajax.Load\nMathJax.Ajax._Load = MathJax.Ajax.Load;\nMathJax.Ajax.Load = function(file, callback) {\n\tvar url = file.JS;\n\tvar callback = MathJax.Callback(callback);\n\tvar hook = callback.hook;\n\tcallback.hook = function() {\n\t\tif (url) MathJax.Hub.Startup.signal.Post({ name: \"End Load\", url: url, toString: function() { return this.name; } });\n\t\treturn hook.apply(this, arguments);\n\t}\n\tif (url) MathJax.Hub.Startup.signal.Post({ name: \"Begin Load\", url: url, toString: function() { return this.name; } });\n\treturn this._Load(file, callback);\n}\n\n\nMathJax.Hub.Startup.signal.Interest(signalHandler);\nMathJax.Hub.signal.Interest(signalHandler);\n\nMathJax.Hub.queue.Push(function() {\n\tvar totalTime = endTime - beginTime;\n\ttaskUI.scale = 90 / totalTime;\n\tObject.each(performance, function(taskName, t) {\n\t\tvar start = t.begin - beginTime, stop = t.end - beginTime, duration = t.end - t.begin;\n\t\tvar timeline = \"start: \" + start + \" / duration: \" + duration + \" / stop: \" + stop;\n\t\ttaskUI.addRow({\n\t\t\ttype: { value: t.type.charAt(0).toUpperCase(), title: t.type, \"class\": t.type },\n\t\t\tname: { value: t.name, title: t.name },\n\t\t\tstart: { value: start, title: timeline },\n\t\t\tduration: { value: duration, title: timeline, \"class\": t.type },\n\t\t\tstop: { value: stop, title: timeline }\n\t\t});\n\t});\n});\n\n}\n\nreturn {\n\tonPageStart: onPageStart,\n\tonMathJaxReady: onMathJaxReady\n}\n\n})();\n\n</script>\n\n\n<!-- Math Panel -->\n\n<div id=\"mathPanel\">\n<table id=\"math\" class=\"timeline\">\n\t<col class=\"label\" style=\"width: 10em;\" />\n\t<col class=\"data\" style=\"width: 10em;\" />\n\t<col class=\"data\" />\n\t<thead>\n\t\t<tr>\n\t\t\t<th><button type=\"button\">Math</button></th>\n\t\t\t<th><button type=\"button\">Source</button></th>\n\t\t\t<th><button type=\"button\">Processing Time (ms)</button></th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr class=\"template\">\n\t\t\t<td class=\"label\"><input readonly class=\"task\" name=\"name\" /></td>\n\t\t\t<td class=\"data\"><input readonly name=\"source\" /></td>\n\t\t\t<td class=\"data\"><input readonly class=\"interval\" name=\"process\" /></td>\n\t\t</tr>\n\t</tbody> \n</table>\n</div>\n\n<script>\nMathJaxDx.Math = (function() {\n\nvar $table = $(\"#mathPanel\").find(\"table\"),\n\tmathUI = new mui.DataTable($table[0]);\n\nvar math = {\n\tmaxDuration: 0,\n\tsamples: []\n}\n\n\nvar onMathJaxReady = function(context, MathJax) {\n\nMathJax.Hub.Register.StartupHook(\"HTML-CSS Jax Ready\", function(message) {\n\tvar HTMLCSS = MathJax.OutputJax[\"HTML-CSS\"];\n\tHTMLCSS.Process = function(script) {\n\t\tvar start = Date.now();\n\t\tthis.Translate(script);\n\t\tvar end = Date.now();\n\t\tvar duration = end - start;\n\t\tif (duration > math.maxDuration) math.maxDuration = duration;\n\t\tmath.samples.push({\n\t\t\tname: script.id,\n\t\t\tsource: $(script).html(),\n\t\t\tprocess: duration\n\t\t});\n\t}\n});\n\nMathJax.Hub.queue.Push(function() {\n\tmathUI.scale = 95 / math.maxDuration;\n\tArray.forEach(math.samples, function(t) {\n\t\tmathUI.addRow({\n\t\t\tname: { value: t.name, title: t.title },\n\t\t\tsource: { value: t.source, title: t.source },\n\t\t\tprocess: { value: t.process, title: t.process, \"class\": \"Process\" }\n\t\t});\n\t});\n});\n\n}\n\nreturn {\n\tonMathJaxReady: onMathJaxReady\n}\n\n})();\n\n</script>\n</div>\n\n</div>\n\t\n<script>\n(function() {\n\n$(window).bind(\"resize\", function(event) {\n\tvar $panels = $(\"#panels\");\n\tvar height = $(window).height() - $panels.offset().top;\n\t$panels.height(height);\n}).trigger(\"resize\");;\n\nvar onclick = function(e) {\n\tvar href = this.href;\n\tvar m = href.split(\"#\");\n\tif (m[0] !== document.URL) return;\n\tvar $panel = $(\"#\" + m[1]);\n\t$panel.parent().children().addClass(\"hidden\");\n\t$panel.removeClass(\"hidden\");\n\t\n\tvar li = this.parentNode;\n\tvar ul = li.parentNode;\n\t$(ul).children().removeClass(\"selected\");\n\t$(li).addClass(\"selected\");\n\treturn false;\n}\n\n$(\"#tabs a\").click(onclick).first().click();\n\n})();\n</script>\n</body>\n<script>\n\nvar notify = function(event, context) {\n\tvar onEvent = \"on\" + event;\n\tvar MathJax = context.MathJax;\n\teach(MathJaxDx, function(name, module) {\n\t\tif (module[onEvent]) module[onEvent](context, MathJax);\n\t});\n}\n\nvar pageReady = false;\nvar Init = function(context) {\n\tnotify(\"PageStart\", context);\n\tvar poll = window.setInterval(function() {\n\t\tif (!pageReady && context && context.document.readyState == \"complete\") {\n\t\t\tpageReady = true;\n\t\t\tnotify(\"PageReady\", context);\n\t\t}\n\t\tif (context && context.MathJax) {\n\t\t\twindow.clearInterval(poll);\n\t\t\tnotify(\"MathJaxReady\", context);\n\t\t}\n\t}, 25);\n}\n\n</script>\n</html>\n\n</body>\n</html>\n");